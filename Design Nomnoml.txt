[FireGunCommand |
public ObjectPool<Bullet> BulletObjectPool;
private GameObject bulletPrefab;
privatte int maxBulletCount;

private void Awake(){
fill the object pool with bullets
subscribing from bullet to deactivateBullet
}

public void Execute() { FireGun(); }
private void FireGun() { 
request object from objectpool 
FlyBullet();
}
]

[InputHandler |
	Dictionary<Keycode, Icommand> allkeyCommands() = new Dictionary<KeyCode, Icommand);
	
    public void HandleInput() {check in dictionary which key is pressed and execute command}
    public void BindInpuToCommand(keycode, Icommand) { bind an input to an command }
    public void UnbindInput(keycode) { check for the key and unbinds command }
]

[ICommand |
	public void Execute();
]

[IDamagable |
	public float Health { get; set; }
    public void TakeDamage(float _damage);
]

[IPoolable |
	bool Active { get; set; }
	public void DisablePoolabe();
	public void EnablePoolabe();
	public void SetPosition(Vector2 _pos);
]

[ObjectPool<T> |
	private List<T> activePool = new;
    private List<T> inActivePool = new;
    public T RequestObject(Vector2 pos) { Adds new Item to pool }
    public void ActivateItem(T item) { Activates item from inactivepool }
    public void DeactivateItem(T item) { deactivates item from activepool }
]

[Player |
	Rigidbody rb2d = getscomponent
    private InputHandler = new
    private List ICOMMAND = new
    private List KeyCode = new
    
    override move();
    override Attack() { inputHandler.HandleInput(); }
]

[Bullet | 
	Rigidbody = getcomponent
    public delegate void BulletCollision (bullet _bullet)
    public event BulletCollisioin OnBulletCollision;
    
    Fire() { fires bullet into direction }
    OnTriggerEnter2D() { if collides with object <Idamagable> { OnBulletCollsion.Invoke }
    DisablePoolable() { disables object }
    EnablePoolable() {enables object }
    SetPosition();
]

[<abstract> ActorBase |
	Health { get; set; }
    abstract void move();
    abstract void Attack();
    public void TakeDamage(float _damage);
]

[Wall |
	float Health {get; set; }
	void TakeDamage(float _damage);
]

[Player] --> [ICommand]

[InputHandler] --> 0..* [ICommand]
[FireGunCommand] --> [ICommand]
[FireGunCommand] +- [Bullet]
[FireGunCommand] +- [ObjectPool<T>]
[Player] +- [InputHandler]
[Player] -:> [ActorBase]

[ActorBase] --> [IDamagable]
[Wall] --> [IDamagable]
[Bullet] --> [IDamagable]
[Bullet] --> [IPoolable]







